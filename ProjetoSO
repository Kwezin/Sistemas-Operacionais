import pandas as pd
import time

# Função para carregar o arquivo de configuração
def load_config(file_path):
    config = {}
    try:
        with open(file_path, "r") as file:
            for line in file:
                key, value = line.strip().split("=")
                config[key] = float(value) if "Delay" in key else int(value)
    except Exception as e:
        print(f"Erro ao carregar arquivo de configuração: {e}")
    return config

# Função para simular paginação
def simulate_execution(file_path, config):
    try:
        # Lendo o arquivo de execução
        data = pd.read_csv(file_path, sep=",", header=None, names=["Processo", "Pag", "End"])
        
        # Exibindo as primeiras linhas para conferir as colunas
        print("Arquivo de execução carregado com sucesso!")
        print("Pré-visualização do arquivo:")
        print(data.head())
        
        # Inicialização da memória física e virtual
        memory_physical = {}
        max_frames = config["MemoriaFisica"]
        delay_physical = config["DelayFisico"]
        delay_virtual = config["DelayVirtual"]
        page_faults = 0

        print("\nIniciando simulação...\n")
        logs = []
        
        for index, row in data.iterrows():
            process_id = row['Processo']
            page = row['Pag']
            logical_address = row['End']

            # Verificar se a página já está na memória física
            if (process_id, page) in memory_physical:
                print(f"[TEMPO {index}] Página {page} do Processo {process_id} já está na memória.")
                logs.append(f"[TEMPO {index}] Página {page} do Processo {process_id} já está na memória.")
                time.sleep(delay_physical)  # Simula acesso rápido
            else:
                # Page fault
                print(f"[TEMPO {index}] [PAGE FAULT] Página {page} do Processo {process_id} não está na memória.")
                logs.append(f"[TEMPO {index}] [PAGE FAULT] Página {page} do Processo {process_id} não está na memória.")
                page_faults += 1

                # Adicionar página na memória física (FIFO)
                if len(memory_physical) < max_frames:
                    memory_physical[(process_id, page)] = logical_address
                else:
                    # Substituição de página: FIFO
                    removed_page = list(memory_physical.keys())[0]
                    print(f"[TEMPO {index}] Substituindo Página {removed_page[1]} do Processo {removed_page[0]}.")
                    logs.append(f"[TEMPO {index}] Substituindo Página {removed_page[1]} do Processo {removed_page[0]}.")
                    del memory_physical[removed_page]
                    memory_physical[(process_id, page)] = logical_address
                
                time.sleep(delay_virtual)  # Simula acesso mais lento (memória virtual)
            
            # Exibir estado atual da memória física
            print(f"Estado atual da memória física: {memory_physical}")
            logs.append(f"Estado atual da memória física: {memory_physical}")
        
        print("\nSimulação concluída!")
        logs.append("\nSimulação concluída!")
        logs.append(f"Total de Page Faults: {page_faults}")
        print(f"Total de Page Faults: {page_faults}")

        # Salvar logs
        with open("simulacao_logs.txt", "w") as log_file:
            for log in logs:
                log_file.write(log + "\n")
        print("\nLogs salvos no arquivo 'simulacao_logs.txt'.")

    except FileNotFoundError:
        print("Erro: O arquivo especificado não foi encontrado.")
    except ValueError as ve:
        print(f"Erro de validação do arquivo: {ve}")
    except Exception as e:
        print(f"Erro ao executar a simulação: {e}")


# Caminho para o arquivo de configuração e arquivo CSV
config_file_path = "config.txt"
execution_file_path = "arquivo_execucao.csv"

# Carregando as configurações
config = load_config(config_file_path)

# Executando a simulação
simulate_execution(execution_file_path, config)
